{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\moviebooking\\\\movie-booking-frontend\\\\src\\\\components\\\\AccordionMenu.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getUpcomingMovies, getThisWeekMovies } from '../services/movieService';\nimport { format, parseISO } from 'date-fns'; // For date formatting and parsing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccordionMenu = () => {\n  _s();\n  const [moviesByMonth, setMoviesByMonth] = useState({});\n  const [openMonth, setOpenMonth] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const upcoming = await getUpcomingMovies();\n        const thisWeek = await getThisWeekMovies();\n\n        // Combine both lists and group by release month\n        const allMovies = [...upcoming, ...thisWeek];\n        const groupedMovies = allMovies.reduce((acc, movie) => {\n          const month = format(parseISO(movie.releaseDate), 'MMMM'); // e.g., 'January', 'February'\n          if (!acc[month]) acc[month] = {\n            upcoming: [],\n            thisWeek: []\n          };\n          if (upcoming.find(up => up.id === movie.id)) {\n            acc[month].upcoming.push(movie);\n          } else {\n            acc[month].thisWeek.push(movie);\n          }\n          return acc;\n        }, {});\n        setMoviesByMonth(groupedMovies);\n      } catch (error) {\n        console.error(\"Error fetching movies\", error);\n      }\n    };\n    fetchMovies();\n  }, []);\n  const handleToggle = month => {\n    setOpenMonth(openMonth === month ? null : month);\n  };\n  const handleLogout = () => {\n    // Perform any necessary cleanup or state management for logout here\n    navigate('/'); // Redirect to login page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accordion\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Year 2024\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 text-white p-2 rounded mr-2\",\n        onClick: () => navigate('/movies/upcoming'),\n        children: \"Upcoming Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-green-500 text-white p-2 rounded mr-2\",\n        onClick: () => navigate('/movies/this_week'),\n        children: \"This Week Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-purple-500 text-white p-2 rounded mr-2\",\n        onClick: () => navigate('/bookings'),\n        children: \"Booked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-red-500 text-white p-2 rounded\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), Object.keys(moviesByMonth).sort((a, b) => new Date(`${a} 1, 2024`) - new Date(`${b} 1, 2024`)) // Sort months in order\n    .map(month => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cursor-pointer bg-gray-200 p-2 rounded\",\n        onClick: () => handleToggle(month),\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl\",\n          children: month\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this), openMonth === month && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pl-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-bold\",\n          children: \"1. Upcoming Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moviesByMonth[month].upcoming.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: movie.title\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-bold\",\n          children: \"2. This Week Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moviesByMonth[month].thisWeek.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: movie.title\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(AccordionMenu, \"EpzF7k2gW44JiUrWVkkkgKOhg3U=\", false, function () {\n  return [useNavigate];\n});\n_c = AccordionMenu;\nexport default AccordionMenu;\nvar _c;\n$RefreshReg$(_c, \"AccordionMenu\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","getUpcomingMovies","getThisWeekMovies","format","parseISO","jsxDEV","_jsxDEV","AccordionMenu","_s","moviesByMonth","setMoviesByMonth","openMonth","setOpenMonth","navigate","fetchMovies","upcoming","thisWeek","allMovies","groupedMovies","reduce","acc","movie","month","releaseDate","find","up","id","push","error","console","handleToggle","handleLogout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Object","keys","sort","a","b","Date","map","title","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Downloads/moviebooking/movie-booking-frontend/src/components/AccordionMenu.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getUpcomingMovies, getThisWeekMovies } from '../services/movieService';\r\nimport { format, parseISO } from 'date-fns'; // For date formatting and parsing\r\n\r\nconst AccordionMenu = () => {\r\n    const [moviesByMonth, setMoviesByMonth] = useState({});\r\n    const [openMonth, setOpenMonth] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchMovies = async () => {\r\n            try {\r\n                const upcoming = await getUpcomingMovies();\r\n                const thisWeek = await getThisWeekMovies();\r\n\r\n                // Combine both lists and group by release month\r\n                const allMovies = [...upcoming, ...thisWeek];\r\n                const groupedMovies = allMovies.reduce((acc, movie) => {\r\n                    const month = format(parseISO(movie.releaseDate), 'MMMM'); // e.g., 'January', 'February'\r\n                    if (!acc[month]) acc[month] = { upcoming: [], thisWeek: [] };\r\n                    if (upcoming.find((up) => up.id === movie.id)) {\r\n                        acc[month].upcoming.push(movie);\r\n                    } else {\r\n                        acc[month].thisWeek.push(movie);\r\n                    }\r\n                    return acc;\r\n                }, {});\r\n\r\n                setMoviesByMonth(groupedMovies);\r\n            } catch (error) {\r\n                console.error(\"Error fetching movies\", error);\r\n            }\r\n        };\r\n        fetchMovies();\r\n    }, []);\r\n\r\n    const handleToggle = (month) => {\r\n        setOpenMonth(openMonth === month ? null : month);\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // Perform any necessary cleanup or state management for logout here\r\n        navigate('/'); // Redirect to login page\r\n    };\r\n\r\n    return (\r\n        <div className=\"accordion\">\r\n            <h2 className=\"text-2xl font-bold mb-4\">Year 2024</h2>\r\n\r\n            {/* Navigation Buttons */}\r\n            <div className=\"mb-4\">\r\n                <button \r\n                    className=\"bg-blue-500 text-white p-2 rounded mr-2\"\r\n                    onClick={() => navigate('/movies/upcoming')}\r\n                >\r\n                    Upcoming Movies\r\n                </button>\r\n                <button \r\n                    className=\"bg-green-500 text-white p-2 rounded mr-2\"\r\n                    onClick={() => navigate('/movies/this_week')}\r\n                >\r\n                    This Week Movies\r\n                </button>\r\n                <button \r\n                    className=\"bg-purple-500 text-white p-2 rounded mr-2\"\r\n                    onClick={() => navigate('/bookings')}\r\n                >\r\n                    Booked\r\n                </button>\r\n                <button \r\n                    className=\"bg-red-500 text-white p-2 rounded\"\r\n                    onClick={handleLogout}\r\n                >\r\n                    Logout\r\n                </button>\r\n            </div>\r\n\r\n            {/* Dynamically generated accordion for each month */}\r\n            {Object.keys(moviesByMonth)\r\n                .sort((a, b) => new Date(`${a} 1, 2024`) - new Date(`${b} 1, 2024`)) // Sort months in order\r\n                .map((month) => (\r\n                    <div key={month}>\r\n                        <div\r\n                            className=\"cursor-pointer bg-gray-200 p-2 rounded\"\r\n                            onClick={() => handleToggle(month)}\r\n                        >\r\n                            <h3 className=\"text-xl\">{month}</h3>\r\n                        </div>\r\n                        {openMonth === month && (\r\n                            <div className=\"pl-4\">\r\n                                <h4 className=\"font-bold\">1. Upcoming Movies</h4>\r\n                                <ul>\r\n                                    {moviesByMonth[month].upcoming.map((movie) => (\r\n                                        <li key={movie.id}>{movie.title}</li>\r\n                                    ))}\r\n                                </ul>\r\n                                <h4 className=\"font-bold\">2. This Week Movies</h4>\r\n                                <ul>\r\n                                    {moviesByMonth[month].thisWeek.map((movie) => (\r\n                                        <li key={movie.id}>{movie.title}</li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AccordionMenu;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}